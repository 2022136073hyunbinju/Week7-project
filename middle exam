1. 플러터 소개 (6문제)

플러터가 등장한 이유는?
→ 하나의 코드로 여러 플랫폼(Android, iOS 등)을 동시에 개발하기 위해 등장했다. (크로스 플랫폼 프레임워크)

플러터의 핵심 장점 중 하나가 아닌 것은?
→ 네이티브 성능 저하나 웹 전용 프레임워크 같은 것은 아니다.
플러터의 장점은 빠른 성능, 크로스플랫폼, 위젯 기반 구조 등이다.

플러터는 어떤 언어로 개발되는가?
→ Dart 언어

플러터의 장점 중 하나로 올바른 것은?
→ Hot Reload로 빠른 수정, 높은 성능, 다양한 플랫폼 지원

플러터의 주요 특징으로 올바른 것은?
→ 위젯 기반 UI, 단일 코드베이스, 고성능 렌더링

플러터의 ‘Hot Reload’ 기능에 대한 설명으로 옳은 것은?
→ 앱을 완전히 다시 실행하지 않고 코드 변경을 즉시 반영하는 기능



2. 개발 환경 설정하기 (5문제)
Flutter SDK 설치 시 PATH 설정이 필요한 이유는?
→ 터미널이나 명령 프롬프트 어디서나 flutter 명령을 실행할 수 있게 하기 위해

VSCode에서 플러터 개발에 가장 필수적인 확장은?
→ Flutter와 Dart 확장(extension)

flutter doctor 명령의 역할은?
→ 개발 환경 상태를 점검하고 필요한 설정이 완료되었는지 확인한다.

IDE 설정에서 단축키를 활용하는 이유는?
→ 개발 속도와 효율을 높이기 위해

Flutter 프로젝트에서 필요한 패키지를 추가할 때 사용하는 파일은?
→ pubspec.yaml 파일



3. 다트 이해하기 (10문제)
final과 const의 차이로 올바른 설명은?
→ final은 실행 중(런타임)에 값이 정해지고, const는 컴파일 시에 값이 정해진다.

다트의 기본 자료형이 아닌 것은?
→ float (다트는 int, double, String, bool 등을 기본형으로 사용)

late 키워드의 역할은?
→ 변수를 나중에 초기화하겠다는 의미 (지연 초기화)

? 연산자는?
→ null을 허용하는 타입을 표시 (예: int? x)

변수를 한 번만 할당하고 변경할 수 없게 만드는 키워드는?
→ final

null 값을 허용하는 변수 타입을 나타내는 기호는?
→ ?

아래 중 다트 함수 선언으로 올바른 것은?
→ int add(int a, int b) => a + b;

var로 선언한 변수는?
→ 처음 대입된 값의 타입으로 자동 추론되고, 이후 타입은 바꿀 수 없다.

반복문이 아닌 것은?
→ if문 (조건문이다. 반복문은 for, while, do-while)

OOP의 핵심 개념이 아닌 것은?
→ 절차적 프로그래밍
(OOP 핵심: 캡슐화, 상속, 다형성, 추상화)



4. 플러터 필수 개념 이해하기 (9문제)
플러터 앱의 가장 기본 단위는?
→ Widget

StatelessWidget의 특징은?
→ 상태가 변하지 않는 위젯. 한 번 그려지면 변경되지 않는다.

StatefulWidget에서 상태를 관리하는 클래스는?
→ State<T> 클래스

위젯 트리의 루트에 위치한 것은?
→ MaterialApp 또는 CupertinoApp

Column 위젯은 어떤 방향으로 정렬하는가?
→ 세로 방향(vertical)

Row 위젯의 정렬 축은?
→ 가로 방향(horizontal)

AnimatedContainer는 어떤 기능을 제공하는가?
→ 색, 크기, 위치 등의 속성이 변할 때 애니메이션 효과로 자연스럽게 변경된다.

Navigator.push()의 역할은?
→ 새로운 화면(페이지)을 스택에 추가하여 이동한다.

setState() 호출의 올바른 목적은?
→ 상태값을 변경하고, 변경된 상태에 따라 UI를 다시 그리기 위해 호출한다.
